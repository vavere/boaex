#!/usr/bin/env python
"""SAP BusinessObject audit log extractor

Usage:
    boaex
    boaex [--uid=USERID --pwd=PASSWORD --host=HOST --dbn=DATABASE --loop=LOOP --log=LEVEL]
    boaex [-u USERID -p PASSWORD -h HOST -d DATABASE -l LOOP]
    boaex --help
    boaex --version

Options:
    -u USERID --uid=USERID  User name [default: dba].
    -p PASSWORD --pwd=PASSWORD  Password [default: ].
    -h HOST --host=HOST  Server host name [default: localhost].
    -d DATABASE --dbn=DATABASE  Database name [default: BI4_Audit].
    -l LOOP --loop=LOOP  Looping interval in seconds, max 3600 [default: 0].
    --log=LEVEL  Log level DEBUG, INFO, WARNING, ERROR [default: WARNING].
    --help  Show this screen.
    --version  Show version.

Alternatively, you can specify the same options in the environment variables
BOAEX_USERID, BOAEX_PASSWORD, BOAEX_HOST, BOAEX_DATABASE, BOAEX_LOOP, BOAEX_LEVEL
Recommended for daemon password handling

"""
import os
import re
import sys
import time
import signal
import logging
import json
import sqlanydb
from pathlib import Path
from docopt import docopt

loop_forever = True
arguments = []

def handle_environ(name, option):
    if os.environ.get(name) is not None:
        arguments[option] = os.environ.get(name)

def get_lastpath(): # pieņemu ka /var/lib eksistē
    logging.debug('get_lastpath()')
    boaPath = Path('/var/lib/boa-extract')
    if not boaPath.exists():
        boaPath.mkdir()
    return boaPath.joinpath('last')

def get_logpath(): # pieņemu ka /var/log eksistē
    logging.debug('get_logpath()')
    logPath = Path('/var/log/boaex.log')
    logPath.touch(exist_ok=True)
    return logPath

def get_last():
    logging.debug('get_last()')
    lastFile = get_lastpath()
    lastId = None
    if lastFile.exists():
        lastId = lastFile.read_text()
    return lastId

def set_last(id):
    logging.debug('set_last(%s)' % id)
    lastFile = get_lastpath()
    lastFile.write_text(id)

def execute(conn, query, params=[]):
    logging.debug('execute(%s, %s)' % (query, str(params)))
    curs = conn.cursor()
    curs.execute(query, params)
    return curs

def query_last(conn):
    logging.debug('query_last()')
    try:
        curs = execute(conn, 'select TOP 1 Start_Time from dba.ADS_EVENT order by Start_Time desc')
        row = curs.fetchone()
        if row is not None:
            lastid = row[0]
    except Exception as e:
        logging.error(e)
    else:
        curs.close()
        return lastid

def get_event_details(conn, eventId):
    logging.debug('get_event_details()')
    try:
        logging.debug('open details query')
        details_query = '''
        select Event_Detail_Type_Name as Name, Event_Detail_Value as Value
        from dba.ADS_EVENT_DETAIL
        inner join dba.ADS_EVENT_DETAIL_TYPE_STR on ADS_EVENT_DETAIL_TYPE_STR.Event_Detail_Type_ID = ADS_EVENT_DETAIL.Event_Detail_Type_ID
        where Event_ID= ?
        and Language='EN'
        order by Event_Detail_Type_Name desc
        '''
        curs = execute(conn, details_query, [eventId])
        desc = curs.description
        rows = curs.fetchall()
        logging.debug('build details values')
        result = ''
        for row in rows:
            name = str(row[0]).replace(' ', '_')
            value = str(row[1]).strip().replace('\x00', '')
            matchID = re.search('_ID$', name)
            if value != '' and matchID is None:
                if result != "":
                    result += ', '
                result += '"%s": "%s"' % (name, value)
    except Exception as e:
        logging.error(e)
    else:
        logging.debug('close details query')
        curs.close()
        if result != "":
            result = ', %s' % result
        return result

def process_events(conn):
    logging.debug('process_events()')
    try:
        lastId = get_last()
        if lastId is not None:
            logging.debug('last from file %s' % lastId)
        else:
            logging.warning('Last file is empty')
            lastId = query_last(conn)
            logging.debug('last from table: %s' % lastId)
            if lastId is None:
                logging.warning('Event table is empty')
                return
            set_last(lastId)

        logPath = get_logpath()

        logging.debug('open events query')
        events_query = '''select top 100
        Event_ID,Start_Time,User_Name,Session_ID,Object_Name,Event_Type_Name,Status_Name,Duration_ms,Action_ID,Sequence_In_Action
        from dba.ADS_EVENT
        inner join dba.ADS_EVENT_TYPE_STR on ADS_EVENT_TYPE_STR.Event_Type_ID = ADS_EVENT.Event_Type_ID
        inner join dba.ADS_STATUS_STR on ADS_STATUS_STR.Status_ID = ADS_EVENT.Status_ID
        where Start_Time > ?
        and ADS_EVENT_TYPE_STR.Language = 'EN'
        and ADS_STATUS_STR.Language = 'EN'
        order by Start_Time
        '''
        curs = execute(conn, events_query, [lastId])
        desc = curs.description
        count = 0
        while loop_forever:
            logging.debug('fetch next')
            row = curs.fetchone()
            if row == None:
                break
            count = count + 1

            logging.debug('build event json')
            result = ""
            for col in range(len(desc)):
                if row[col] != "":
                    if result !="":
                        result += ', '
                    result += '"%s": "%s"' % (desc[col][0], row[col])
            result += get_event_details(conn, row[0]) # Event_ID
            result = '{%s}\n' % result

            logging.debug('append to log')
            with logPath.open('a', encoding ='utf-8') as file:
                file.write(result)
            logging.debug('save last')
            set_last(row[1]) # Start_Time

        if count > 0:
            logging.info('%s events exported' % count)
        else:
            logging.debug('no records found')

    except Exception as e:
        logging.error(e)
    else:
        logging.debug('close events query')
        curs.close()

def process():
    try:
        logging.debug('open connection')
        conn = sqlanydb.connect(uid=arguments['--uid'], pwd=arguments['--pwd'], host=arguments['--host'], dbn=arguments['--dbn'])
        process_events(conn)
    except Exception as e:
        logging.error(e)
    else:
        logging.debug('close connection')
        conn.close()

def handler(signum, frame):
    global loop_forever
    loop_forever = False
    logging.info('Received %s' % signal.Signals(signum).name)

signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)

def main():
    logging.info('Init')
    while loop_forever:
        process()
        loop = int(arguments['--loop'])
        if not loop > 0: break
        for i in range(loop):
            time.sleep(1)
            if not loop_forever: break
    logging.info('Exit')

if __name__ == '__main__':
    # arguments
    arguments = docopt(__doc__, version='v1.0', )
    # environment
    handle_environ('BOAEX_USERID', '--uid')
    handle_environ('BOAEX_PASSWORD', '--pwd')
    handle_environ('BOAEX_HOST', '--host')
    handle_environ('BOAEX_DATABASE', '--dbn')
    handle_environ('BOAEX_LOOP', '--loop')
    handle_environ('BOAEXBOAEX_LEVEL', '--log')
    # init log
    logging.basicConfig(format='boaex: [%(levelname)s] %(message)s', level=arguments['--log'].upper())
    # debug options
    log_args = arguments.copy()
    log_args['--pwd'] = '*' * len(log_args['--pwd'])
    logging.debug(log_args)
    main()
